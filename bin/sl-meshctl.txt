usage: %MAIN% [options] [command ...]

Run-time control of the Strongloop process manager.

Options:
  -h,--help               Print help and exit.
  -v,--version            Print version and exit.
  -C,--control CTL        Control endpoint for process manager.

The control endpoint for the process manager is searched for if not specified,
in this order:

1. `STRONGLOOP_PM` in environment: may be a local domain path, or an HTTP URL.
2. `./pmctl`: a process manager running in the current working directory.
3. `~/.strong-pm/pmctl`: a process manager running in the user's home directory.
4. `/var/lib/strong-pm/pmctl`: a process manager installed by pm-install.
5. `http://localhost:8701`: a process manager running on localhost

An HTTP URL is mandatory for remote process managers, but can also be used on
localhost. If the process manager is using HTTP authentication
then valid credentials must be set in the URL directly, such as
`http://user-here:pass-here@example.com:7654`.

When using an HTTP URL, it can optionally be tunneled over ssh by changing the
protocol to `http+ssh://`. The ssh username will default to your current user
and authentication defaults to using your current ssh-agent. The username can be
overridden by setting an `SSH_USER` environment variable. The authentication can
be overridden to use an existing private key instead of an agent by setting the
`SSH_KEY` environment variable to the path of the private key to be used.

Commands:
  status [SVC]            Report status for service SVC, or all services if
        no SVC is provided. This is the default command.

  create NAME [SCALE]     Create service named NAME, SCALE defaults to 1.
  ls                      List services.
  remove SVC              Remove a service SVC.

  shutdown                Shutdown the process manager.

  start SVC               Start service SVC.
  stop SVC                Hard stop service SVC.
  soft-stop SVC           Soft stop service SVC.
  restart SVC             Hard stop and restart service SVC with new config.
  soft-restart SVC        Soft stop and restart service SVC with new config.
        "Soft" stops notify workers they are being disconnected, and give them
        a grace period for any existing connections to finish. "Hard" stops
        kill the supervisor and its workers with `SIGTERM`.

  cluster-restart SVC     Restart the service SVC cluster workers.
        This is a zero-downtime restart, the workers are soft restarted
        one-by-one, so that some workers will always be available to service
        requests.

  set-size SVC N          Set cluster size for service SVC to N workers.
        The default cluster size is the number of CPU cores.

  objects-start ID        Start tracking objects on worker ID.
  objects-stop ID         Stop tracking objects on worker ID.
        Object tracking is published as metrics, and requires configuration so
        that the `--metrics=URL` option is passed to the runner.

  cpu-start ID [TIMEOUT]  Start CPU profiling on worker ID.
        TIMEOUT is the optional watchdog timeout, in milliseconds.  In watchdog
        mode, the profiler is suspended until an event loop stall is detected;
        i.e. when a script is running for too long.  Only supported on Linux.

  cpu-stop ID [NAME]      Stop CPU profiling on worker ID.
        The profile is saved as `<NAME>.cpuprofile`. CPU profiles must be
        loaded into Chrome Dev Tools. The NAME is optional, and defaults to
        `node.<PID>`.

  heap-snapshot ID [NAME] Save heap snapshot for worker ID.
        The snapshot is saved as `<NAME>.heapsnapshot`.  Heap snapshots must be
        loaded into Chrome Dev Tools. The NAME is optional, and defaults to
        `node.<PID>`.

  patch ID FILE           Apply patch FILE to worker ID.

  npmls ID [DEPTH]        List dependencies of the service ID.

  env[-get] SVC [KEYS...]
        List specified environment variables for service SVC. If none are
        specified, list all variables.
  env-set SVC K=V...   Set one or more environment variables for
        service SVC.
  env-unset SVC KEYS...
        Unset one or more environment variables for service SVC. The
        environment variables are applied to the current application, and the
        application is hard restarted with the new environment after change
        (either set or unset).

  log-dump SVC [--follow]
        Empty the log buffer, dumping the contents to stdout for service SVC.
        If --follow is given the log buffer is continuously dumped to stdout.

`SVC` is either a service ID or service Name. It can be obtained by listing
services using `ls` or `status`.

`ID` is a worker ID. It can be obtained using the `status` command and refers
to a specific worker of a specific service.
